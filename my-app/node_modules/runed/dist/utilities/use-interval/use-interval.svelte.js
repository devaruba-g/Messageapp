import { extract } from "../extract/index.js";
/**
 * Wrapper for `setInterval` with controls for pausing and resuming.
 *
 * @see https://runed.dev/docs/utilities/use-interval
 *
 * @param callback - The function to execute repeatedly
 * @param interval - The interval in milliseconds between executions
 * @param options - Configuration options
 * @returns Object with pause, resume methods and isActive state
 */
export function useInterval(callback, interval, options = {}) {
    const { immediate = true, immediateCallback = false } = options;
    let intervalId = $state(null);
    function pause() {
        if (intervalId === null)
            return;
        clearInterval(intervalId);
        intervalId = null;
    }
    function resume() {
        if (intervalId !== null)
            return;
        if (immediateCallback) {
            callback();
        }
        const currentInterval = extract(interval);
        intervalId = setInterval(callback, currentInterval);
    }
    // Start immediately if requested
    if (immediate) {
        resume();
    }
    // Cleanup on disposal
    $effect(() => {
        return () => {
            if (intervalId !== null) {
                clearInterval(intervalId);
            }
        };
    });
    const isActive = $derived(intervalId !== null);
    return {
        pause,
        resume,
        get isActive() {
            return isActive;
        },
    };
}
